{"version":3,"sources":["hoc/WithAuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogsItem","path","id","className","DialogsStyles","dialog","name","Message","message","maxLength10","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","placeholder","cols","component","Textarea","Dialogs","dialogsElements","DialogPage","dialogsData","map","d","messagesElements","dialogs_messagesData","m","wrapper","dialogs","dialogs_item","messages","message_input","formData","newMessage","compose","dispatch","addMessage"],"mappings":"4NAIIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAUtC,OAFgCM,YAAQX,EAARW,CAAoCL,K,oBClBxEM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,cAAgB,+BAA+B,KAAO,wB,6ECWrRC,EATK,SAACN,GACjB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACI,qBAAKC,UAAWC,IAAcC,OAA9B,SACI,cAAC,IAAD,CAASF,UAAU,cAAcR,GAAIM,EAArC,SAA6CP,EAAMY,UCEhDC,EANC,SAACb,GACb,OACI,qBAAKS,UAAWC,IAAcI,QAA9B,SAAwCd,EAAMc,W,wCCGhDC,EAAcC,YAAU,IASxBC,EAAsBC,YAAU,CAACC,KAAM,kBAAjBD,EAPL,SAAClB,GACpB,OAAO,uBAAMS,UAAWC,IAAcS,KAAMC,SAAUpB,EAAMqB,aAArD,UACH,cAACC,EAAA,EAAD,CAAOC,SAAU,CAACR,GAAcS,YAAY,8FAAmBC,KAAK,KAAKC,UAAWC,IAAUf,KAAM,YACpG,gDA8BOgB,EAxBC,SAAC5B,GACb,IAAI6B,EAAkB7B,EAAM8B,WAAWC,YAAYC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAwBrB,KAAMqB,EAAErB,KAAMJ,GAAIyB,EAAEzB,IAA1ByB,EAAEzB,OAC7E0B,EAAmBlC,EAAM8B,WAAWK,qBAAqBH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,SAAjBsB,EAAE5B,OAMvF,OAAQ,sBAAKC,UAAWC,IAAc2B,QAA9B,UACJ,qBAAK5B,UAAWC,IAAc4B,QAA9B,SACI,qBAAK7B,UAAWC,IAAc6B,aAA9B,SACMV,MAGV,sBAAKpB,UAAWC,IAAc8B,SAA9B,UACMN,EAEF,qBAAKzB,UAAWC,IAAc+B,cAA9B,SACI,cAACxB,EAAD,CAAqBG,SAdd,SAACsB,GAChB1C,EAAM2C,WAAWD,EAAS5B,qB,iCCJnB8B,sBACXhD,IACAO,aAhBoB,SAACV,GACrB,MAAO,CACHqC,WAAYrC,EAAMqC,eAIC,SAACe,GACxB,MAAO,CACHF,WAAY,SAAC7B,GACT+B,EAASC,YAAWhC,SAKjB8B,CAGbhB","file":"static/js/5.a44663d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let connectedWithAuthRedirect = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return connectedWithAuthRedirect;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__i-PQ1\",\"dialogs\":\"Dialogs_dialogs__3ku8l\",\"dialogs_item\":\"Dialogs_dialogs_item__3S3jY\",\"dialog\":\"Dialogs_dialog__B2b59\",\"messages\":\"Dialogs_messages__3m2wS\",\"message\":\"Dialogs_message__2kpo2\",\"message_input\":\"Dialogs_message_input__1t04H\",\"form\":\"Dialogs_form__1Nof-\"};","import DialogsStyles from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogsItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={DialogsStyles.dialog}>\r\n            <NavLink className='dialog_name' to={path} >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import DialogsStyles\r\n    from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={DialogsStyles.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import DialogsStyles from './Dialogs.module.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength} from \"../../Utils/Validators/Validators\";\r\nimport {Textarea} from \"../Common/FormControls/FormControl\";\r\n\r\nconst maxLength10 = maxLength(10);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return <form className={DialogsStyles.form} onSubmit={props.handleSubmit}>\r\n        <Field validate={[maxLength10]} placeholder='Введите сообение' cols='70' component={Textarea} name={'message'}/>\r\n        <button>Send</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'AddMessageForm'})(AddMessageForm);\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.DialogPage.dialogsData.map( d => <DialogsItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.DialogPage.dialogs_messagesData.map( m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let onNewMessage = (formData) => {\r\n        props.newMessage(formData.message);\r\n    }\r\n\r\n    return (<div className={DialogsStyles.wrapper}>\r\n        <div className={DialogsStyles.dialogs}>\r\n            <div className={DialogsStyles.dialogs_item}>\r\n                { dialogsElements }\r\n            </div>\r\n        </div>\r\n        <div className={DialogsStyles.messages}>\r\n            { messagesElements }\r\n\r\n            <div className={DialogsStyles.message_input}>\r\n                <AddMessageFormRedux onSubmit={onNewMessage}/>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Dialogs;\r\n","import Dialogs from \"./Dialogs\";\r\nimport {addMessage} from \"../../redux/dialogReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        DialogPage: state.DialogPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        newMessage: (message) => {\r\n            dispatch(addMessage(message));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n\r\n"],"sourceRoot":""}